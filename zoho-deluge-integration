//search records

ifrat = zoho.crm.searchRecords("Leads", "Email:starts_with:ifrat");

info ifrat;

//update info

update_ifrat = Map();
update_ifrat.put("Email","ifrat@instawebworks.com.au");

update_action = zoho.crm.updateRecord("Leads", 4394900000009364002, update_ifrat);
info update_action;

myLeads =  zoho.crm.getRecords("Leads");

//bulk create
entry1 = Map();
entry1.put("Email","aziz@instawebworks.com.au");
entry1.put("Last_Name","aziz");

entry2 = Map();
entry2.put("Email","emran@instawebworks.com.au");
entry2.put("Last_Name","emran");

newusers = list();
newusers.add(entry1);
newusers.add(entry2);

addingnewuser = zoho.crm.bulkCreate("Leads", newusers);
info addingnewuser;

// Bulk update;

entry1 = {"id":"4394900000009378002","Company":"Insta web works"};
entry2 = {"id":"4394900000009378001","Company":"Insta web works"};
entry3 = {"id":"4394900000009377001","Company":"Insta web works"};


updatelist = list();

updatelist.add(entry1);
updatelist.add(entry2);
updatelist.add(entry3);

updatinguser = zoho.crm.bulkUpdate("Leads", updatelist);
info updatinguser;

//getting a specific data for leads list

myLeads =  zoho.crm.getRecords("Leads");
for each lead in myLeads{
	if(lead.get("Email") != null){
		info lead.get("Email");
	}
}

//Bulk update 100 entry limitation problem solve
allleads = zoho.crm.getRecords("Leads");
mylist = list();
for each item in allleads{
	entry = {"id": item.get("id"),"Company":"Insta web Works"};
	mylist.add(entry);
	if(mylist.size() == 100){
		update_it = zoho.crm.bulkUpdate("Leads", mylist);
		mylist = list();
	}
}
if(mylist.size() > 0){
	update_it = zoho.crm.bulkUpdate("Leads", mylist);
}

info update_it;


// Based on First Char count how many leads are in each group

page_no = 1;
per_page =200;
list_str = ".".leftPad(50).toList("");
leads_list = list();
for each num in list_str {
	leads_list.addAll(zoho.crm.getRecords("Leads", page_no, per_page));
	page_no = page_no + 1;
}

count_map = map();
for each item in leads_list{
	firsthcar = item.get("Full_Name").subText(0,1);
	count_map.put(firsthcar, ifnull(count_map.get(firsthcar), 0) + 1);
}
info count_map.sortKey(true);


//mapping through time/date in zoho
page_no = 1;
per_page = 20;
leads = zoho.crm.getRecords("Leads",page_no,per_page,{"fields":"Created_Time"});

return_map = map();

for each lead in leads{
	year_key = lead.get("Created_Time").toDate().toString("yyyy");
	month_key = lead.get("Created_Time").toDate().toString("MM");
	day_key = lead.get("Created_Time").toDate().toString("dd");
	hour_key = lead.get("Created_Time").toDate().toString("HH");
	
	//getting data
	year_map = ifnull(return_map.get(year_key),map());
	month_map = ifnull(year_map.get(month_key),map());
	day_map =ifnull(month_map.get(day_key),map());
	hour_value = ifnull(day_map.get(hour_key),0) + 1;
	
	//updating data
	day_map.put(hour_key,hour_value);
	month_map.put(day_key,day_map);
	year_map.put(month_key,month_map);
	return_map.put(year_key,year_map);
}
info return_map;


//Filter with COQL
queryMap = {
	"select_query": "SELECT First_Name FROM Leads WHERE Created_Time between '2021-01-01T00:00:01+06:00' and '2021-12-31T23:59:59+06:00'"
	};
response = invokeurl
[
	url :"https://www.zohoapis.com/crm/v2.1/coql"
	type : POST
	parameters: queryMap.toString()
	connection:"test_crm_conn"
];
info response;

//DATE TIME ADD WITH TIME ZONE
appointment_start = deal_info.get("Appointment");
	plus_minus_part = appointment_start.getSuffix("T");
	if(plus_minus_part.contains("-"))
	{
		plus_minus_part = "-" + plus_minus_part.getSuffix("-");
	}
	else
	{
		plus_minus_part = "+" + plus_minus_part.getSuffix("+");
	}
	appointment_end = appointment_start.replaceAll("T"," ").toDateTime().addHour(1).toString("yyyy-MM-dd'T'HH:mm:ss") + plus_minus_part;

//Moving attachments from one module to another module
attachments = zoho.crm.getRelatedRecords("Attachments","Leads",lead_id);

link_map = {"File_Name":"test from API","Parent_Id":4394900000010041001,"$type":"Link URL","$se_module":"Deals","$link_url":"https://www.drupal.org/files/project-images/Placeholder1_0.png","Size":"0"};
info zoho.crm.createRecord("Attachments",link_map);
